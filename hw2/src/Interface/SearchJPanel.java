/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import DataHistory.*;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author samsamtu
 */
public class SearchJPanel extends javax.swing.JPanel {

    /**
     * Creates new form SearchJPanel
     */
    private Fleet fleet;

    public SearchJPanel(Fleet fleet) throws ParseException {
        initComponents();
        this.fleet = fleet;
        readFromLocal();
    }
    public void readFromLocal() throws ParseException {
    String csvFile = "src/LocalData/LocalData.csv";
        BufferedReader br = null;
        String line = "";
        try {
            br = new BufferedReader(new FileReader(csvFile));
            //skip first line
            br.readLine();
            while ((line = br.readLine()) != null) {
                String[] localData = line.split(",");
                
                Car car = new Car();
          
                car.setSerialNum(Integer.parseInt(localData[0]));
                car.setCompany(localData[2]);
                car.setCity(localData[4]);
                
                car.setModelNum(Integer.parseInt(localData[5]));
                car.setManufactureYear(Integer.parseInt(localData[6]));
                car.setUber(localData[7].equals("YES"));
                car.setSeatsNum(Integer.parseInt(localData[8]));
                DateFormat format = new SimpleDateFormat("MM/dd/yyyy", Locale.ENGLISH);
                Date availTime = format.parse(localData[1]);
                Date now = new Date();
                if(!availTime.after(now)) {
                    JOptionPane.showMessageDialog(null, "the avail time should be a future time!!");
                    System.exit(WIDTH);
                }
                else {
                    car.setUpdateTime(localData[9]);
                    car.setAvailTime(localData[1]);
                    car.setExpiredTime(localData[3]);
                    fleet.addCar(car);
                }
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } 
        
        // close the file
        if (br != null) {
                try {
                    br.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }   
    }
    public void populateTable() throws ParseException {   
        DefaultTableModel dtm = (DefaultTableModel) viewTable.getModel();
        dtm.setRowCount(0);
        for(Car car : fleet.getFleet()) {
           dtm.addRow(writeRow(car));
        }
    }
    
    private Object[] writeRow(Car car) throws ParseException {
        DateFormat format = new SimpleDateFormat("MM/dd/yyyy", Locale.ENGLISH);
            Date expiredTime = format.parse(car.getExpiredTime());
            Date now = new Date();
        Object row[] = new Object[10];
            row[0] = car;
            row[1] = car.getAvailTime();
            row[2] = car.getCompany();
            row[3] = expiredTime.after(now);
            row[4] = car.getCity();
            row[5] = car.getModelNum(); 
            row[6] = car.getManufactureYear();
            row[7] = car.isUber();
            row[8] = car.getSeatsNum();
            row[9] = car.getUpdateTime();
            return row;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        viewTable = new javax.swing.JTable();
        updateTimeTextField = new javax.swing.JTextField();
        allComBtn = new javax.swing.JButton();
        updateTimeBtn = new javax.swing.JButton();
        firstAvailBtn = new javax.swing.JButton();
        currAvailNumBtn = new javax.swing.JButton();
        currAvailNumTextField = new javax.swing.JTextField();
        currNotAvailNumBtn = new javax.swing.JButton();
        currNotAvailNumTextField = new javax.swing.JTextField();
        listAllBtn = new javax.swing.JButton();
        manuYearComboBox = new javax.swing.JComboBox<>();
        modelNumTextField = new javax.swing.JTextField();
        minSeatsTextField = new javax.swing.JTextField();
        maxSeatsTextField = new javax.swing.JTextField();
        serialNumBtn = new javax.swing.JButton();
        serialNumTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        searchBtn = new javax.swing.JButton();
        refreshBtn = new javax.swing.JButton();
        seatCheckBox = new javax.swing.JCheckBox();
        uberCheckBox = new javax.swing.JCheckBox();
        manuYearCheckBox = new javax.swing.JCheckBox();
        cityCheckBox = new javax.swing.JCheckBox();
        modelNumCheckBox = new javax.swing.JCheckBox();
        uberYesBtn = new javax.swing.JRadioButton();
        uberNoBtn = new javax.swing.JRadioButton();
        cityComboBox = new javax.swing.JComboBox<>();
        companyLabel = new javax.swing.JLabel();

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Search Car Info");

        viewTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Serial Num", "Avail Time", "Company", "Mainten expired？", "City", "Model Num", "Manu Year", "Is Uber？", "Seats Num", "Update time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Boolean.class, java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(viewTable);

        updateTimeTextField.setEnabled(false);

        allComBtn.setText("All Companies");
        allComBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allComBtnActionPerformed(evt);
            }
        });

        updateTimeBtn.setText("Catlog update Time");
        updateTimeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateTimeBtnActionPerformed(evt);
            }
        });

        firstAvailBtn.setText("First Avail");
        firstAvailBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstAvailBtnActionPerformed(evt);
            }
        });

        currAvailNumBtn.setText("Currently Avail Num");
        currAvailNumBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                currAvailNumBtnActionPerformed(evt);
            }
        });

        currAvailNumTextField.setEnabled(false);

        currNotAvailNumBtn.setText("Currently not Avail Num");
        currNotAvailNumBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                currNotAvailNumBtnActionPerformed(evt);
            }
        });

        currNotAvailNumTextField.setEnabled(false);

        listAllBtn.setText("List all");
        listAllBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listAllBtnActionPerformed(evt);
            }
        });

        manuYearComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1990", "1991", "1992", "1993", "1994", "1995", "1996", "1997", "1998", "1999", "2000" }));
        manuYearComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manuYearComboBoxActionPerformed(evt);
            }
        });

        serialNumBtn.setText("Search by Serial Num");
        serialNumBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serialNumBtnActionPerformed(evt);
            }
        });

        jLabel2.setText("and");

        searchBtn.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        searchBtn.setText("Search");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        refreshBtn.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        refreshBtn.setText("Refresh");
        refreshBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshBtnActionPerformed(evt);
            }
        });

        seatCheckBox.setText("Seats between");

        uberCheckBox.setText("by Uber");

        manuYearCheckBox.setText("Manufactured Year");

        cityCheckBox.setText("City");

        modelNumCheckBox.setText("Model Number");

        buttonGroup1.add(uberYesBtn);
        uberYesBtn.setText("Yes");

        buttonGroup1.add(uberNoBtn);
        uberNoBtn.setText("No");

        cityComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Atlanda", "Boston", "Chicago", "Dallas", "DC", "Denver", "Houston", "Los Angeles", "Miami", "New York", "Orando", "San Francisco", "Seattle", " " }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(81, 81, 81)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(manuYearCheckBox)
                            .addComponent(modelNumCheckBox)
                            .addComponent(cityCheckBox)
                            .addComponent(seatCheckBox))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(manuYearComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(uberYesBtn)
                                        .addGap(57, 57, 57)
                                        .addComponent(uberNoBtn))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(minSeatsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(maxSeatsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cityComboBox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(modelNumTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addComponent(uberCheckBox, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap(422, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(listAllBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(162, 162, 162)
                                        .addComponent(updateTimeBtn)
                                        .addGap(57, 57, 57)
                                        .addComponent(updateTimeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(serialNumBtn)
                                                .addGap(18, 18, 18)
                                                .addComponent(serialNumTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(firstAvailBtn))
                                        .addGap(12, 12, 12)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(43, 43, 43)
                                                .addComponent(currNotAvailNumBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(118, 118, 118)
                                                .addComponent(currAvailNumBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(6, 6, 6)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(currNotAvailNumTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(currAvailNumTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(allComBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(companyLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 529, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(213, 213, 213)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(516, 516, 516)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(searchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(refreshBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 145, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(listAllBtn)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(updateTimeBtn)
                            .addComponent(updateTimeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(currAvailNumBtn)
                            .addComponent(currAvailNumTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(firstAvailBtn))
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(serialNumTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(serialNumBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(currNotAvailNumBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(currNotAvailNumTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(allComBtn)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(companyLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(uberCheckBox)
                    .addComponent(uberYesBtn)
                    .addComponent(uberNoBtn))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(seatCheckBox)
                            .addComponent(minSeatsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(maxSeatsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(manuYearCheckBox)
                            .addComponent(manuYearComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(37, 103, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 57, Short.MAX_VALUE)
                        .addComponent(searchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(refreshBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cityComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cityCheckBox))
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(modelNumCheckBox)
                    .addComponent(modelNumTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void updateTimeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateTimeBtnActionPerformed

        int size = fleet.getFleet().size();

        updateTimeTextField.setText(fleet.getFleet().get(size - 1).getUpdateTime());

//        populateTable();
        // TODO add your handling code here:
    }//GEN-LAST:event_updateTimeBtnActionPerformed

    private void currAvailNumBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currAvailNumBtnActionPerformed
   // we assume that the availTime is the same month as this month is current avail car.    
        int count = 0;
         DefaultTableModel dtm = (DefaultTableModel) viewTable.getModel();
         dtm.setRowCount(0);
         Calendar rightNow = Calendar.getInstance();
         Calendar carTime = Calendar.getInstance();
         DateFormat format = new SimpleDateFormat("MM/dd/yyyy", Locale.ENGLISH);


         for(Car car : fleet.getFleet()) {
            try {
                carTime.setTime(format.parse(car.getAvailTime()));
            } catch (ParseException ex) {
                Logger.getLogger(SearchJPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
         if(rightNow.get(Calendar.YEAR) == carTime.get(Calendar.YEAR) && 
                 rightNow.get(Calendar.MONTH) == carTime.get(Calendar.MONTH)
                  )
         {
             count++;
         }
         }
         currAvailNumTextField.setText(Integer.toString(count));
        // TODO add your handling code here:
    }//GEN-LAST:event_currAvailNumBtnActionPerformed

    private void currNotAvailNumBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currNotAvailNumBtnActionPerformed
        // we assume that the availTime is the same month as this month is current avail car.    
        int count = 0;
         DefaultTableModel dtm = (DefaultTableModel) viewTable.getModel();
         dtm.setRowCount(0);
         Calendar rightNow = Calendar.getInstance();
         Calendar carTime = Calendar.getInstance();
         DateFormat format = new SimpleDateFormat("MM/dd/yyyy", Locale.ENGLISH);
         for (Car car : fleet.getFleet()) {
            try {
                carTime.setTime(format.parse(car.getAvailTime()));
            } catch (ParseException ex) {
                Logger.getLogger(SearchJPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
         if(rightNow.get(Calendar.YEAR) != carTime.get(Calendar.YEAR) || 
                 rightNow.get(Calendar.MONTH) != carTime.get(Calendar.MONTH))
         {
             count++;
         }
         }
         currNotAvailNumTextField.setText(Integer.toString(count));
// TODO add your handling code here:
    }//GEN-LAST:event_currNotAvailNumBtnActionPerformed
    private void searchAirport(ArrayList<Car> carList) {  
        for (Iterator<Car> iter = carList.iterator(); iter.hasNext();) {
            Car car = iter.next();
            // == cannot be used to compare string,== means they are the same reference
            if (!car.getCity().equals(cityComboBox.getSelectedItem().toString())) {
                iter.remove();
            }
        }
    }    
    private void searchModelNum(ArrayList<Car> carList) {
        for (Iterator<Car> iter = carList.iterator(); iter.hasNext();) {
            Car car = iter.next();
            if (car.getModelNum() != Integer.parseInt(modelNumTextField.getText())) {
                iter.remove();       
            }
        }
   
      
    }
    
    
    private void listAllBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listAllBtnActionPerformed
        
        try {
            populateTable();
        } catch (ParseException ex) {
            Logger.getLogger(SearchJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_listAllBtnActionPerformed
    private void searchBoeing(ArrayList<Car> carList) {
  
        if(uberYesBtn.isSelected()){
        for (Iterator<Car> iter = carList.iterator(); iter.hasNext();) {
            Car car = iter.next();
            if (!car.isUber()) {
                iter.remove();
            }
        }
        }
        else{
        for (Iterator<Car> iter = carList.iterator(); iter.hasNext();) {
            Car car = iter.next();
            if (car.isUber()) {
                iter.remove();
            }
        }
        }
    }
    private void allComBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allComBtnActionPerformed
        HashSet<String> h = new HashSet<String>();
        for(Car car : fleet.getFleet()) {
            h.add(car.getCompany());
        }               
        companyLabel.setText(h.toString());
    }//GEN-LAST:event_allComBtnActionPerformed
    private void searchSeat(ArrayList<Car> carList) {
   
        int minSeats = Integer.parseInt(minSeatsTextField.getText());
        int maxSeats = Integer.parseInt(maxSeatsTextField.getText());
        for (Iterator<Car> iter = carList.iterator(); iter.hasNext();) {
            Car car = iter.next();
            if (!(car.getSeatsNum() >= minSeats && car.getSeatsNum() <= maxSeats)) {
                iter.remove();
            }
        }
    
    }
    private void firstAvailBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstAvailBtnActionPerformed
        DefaultTableModel dtm = (DefaultTableModel) viewTable.getModel();
        dtm.setRowCount(0);    
        ArrayList<Date> dates = new ArrayList<>();
        DateFormat format = new SimpleDateFormat("MM/dd/yyyy", Locale.ENGLISH);
        for (Car car : fleet.getFleet()) {
            try {       
                dates.add(format.parse(car.getAvailTime()));
            } catch (ParseException ex) {
                Logger.getLogger(SearchJPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        Collections.sort(dates, (o1, o2) -> o1.compareTo(o2));
        Date minDate = dates.get(0);
        System.out.print(format.format(minDate));
        for (Car car : fleet.getFleet()) {
            try {
                if(car.getAvailTime().equals(format.format(minDate))) {
                    dtm.addRow(writeRow(car));
                }   } catch (ParseException ex) {
                Logger.getLogger(SearchJPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_firstAvailBtnActionPerformed
    private void searchManuYear(ArrayList<Car> carList) {
        int manuYear = Integer.parseInt(manuYearComboBox.getSelectedItem().toString());  
        for (Iterator<Car> iter = carList.iterator(); iter.hasNext();) {
            Car car = iter.next();
            if(car.getManufactureYear() != manuYear) {
             iter.remove();
        }
        }
    }
    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        //copy everything from the original carList;
        ArrayList<Car> resultList = new ArrayList();
        for(Car car : fleet.getFleet()) {
           resultList.add(car);
        }
        // do filting when a checkBox is selected
        if(uberCheckBox.isSelected()) {
           searchBoeing(resultList);
        }
        if(seatCheckBox.isSelected()) {
            searchSeat(resultList);
        }
        if(manuYearCheckBox.isSelected()) {
            searchManuYear(resultList);
        }
        if(cityCheckBox.isSelected()) {
            searchAirport(resultList);
        }
        if(modelNumCheckBox.isSelected()) {
            searchModelNum(resultList);
        }
        DefaultTableModel dtm = (DefaultTableModel) viewTable.getModel();
        dtm.setRowCount(0);   
        for (Car car : resultList) {
            try {
                dtm.addRow(writeRow(car));
            } catch (ParseException ex) {
                Logger.getLogger(SearchJPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_searchBtnActionPerformed

    private void refreshBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshBtnActionPerformed
        try {
            populateTable();
        } catch (ParseException ex) {
            Logger.getLogger(SearchJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_refreshBtnActionPerformed

    private void serialNumBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serialNumBtnActionPerformed
        //there is only one Serial Number
        DefaultTableModel dtm = (DefaultTableModel)viewTable.getModel();
        dtm.setRowCount(0);
//        while (dtm.getRowCount() > 0) {
//            dtm.removeRow(0);
//        }
        //ArrayList<Plane> result = new ArrayList<>();
        for (Car car : fleet.getFleet()) {
            if (car.getSerialNum() == Integer.parseInt(serialNumTextField.getText())) {
                try {
                    dtm.addRow(writeRow(car));
                } catch (ParseException ex) {
                    Logger.getLogger(SearchJPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            }
        }
    }//GEN-LAST:event_serialNumBtnActionPerformed

    private void manuYearComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manuYearComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_manuYearComboBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton allComBtn;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox cityCheckBox;
    private javax.swing.JComboBox<String> cityComboBox;
    private javax.swing.JLabel companyLabel;
    private javax.swing.JButton currAvailNumBtn;
    private javax.swing.JTextField currAvailNumTextField;
    private javax.swing.JButton currNotAvailNumBtn;
    private javax.swing.JTextField currNotAvailNumTextField;
    private javax.swing.JButton firstAvailBtn;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton listAllBtn;
    private javax.swing.JCheckBox manuYearCheckBox;
    private javax.swing.JComboBox<String> manuYearComboBox;
    private javax.swing.JTextField maxSeatsTextField;
    private javax.swing.JTextField minSeatsTextField;
    private javax.swing.JCheckBox modelNumCheckBox;
    private javax.swing.JTextField modelNumTextField;
    private javax.swing.JButton refreshBtn;
    private javax.swing.JButton searchBtn;
    private javax.swing.JCheckBox seatCheckBox;
    private javax.swing.JButton serialNumBtn;
    private javax.swing.JTextField serialNumTextField;
    private javax.swing.JCheckBox uberCheckBox;
    private javax.swing.JRadioButton uberNoBtn;
    private javax.swing.JRadioButton uberYesBtn;
    private javax.swing.JButton updateTimeBtn;
    private javax.swing.JTextField updateTimeTextField;
    private javax.swing.JTable viewTable;
    // End of variables declaration//GEN-END:variables
}
